**Practice Lab 6: Introduction to Vue.js Components and Composition**

In this lab, we'll gain hands-on experience with basic components and composition in Vue.js.

**Starting Code**

The provided starting code sets up a basic Vue application with no specific functionality.

Navigate to `student/01-components-composition`, then run `npm install` and `npm run dev`. Ensure that the app is visible in your browser.

The tasks are outlined in the `App.vue` file.

**Task 1**: Create a Task component and a TaskList component in your Vue app.

**Task 2**: Use the Task component inside the TaskList component to represent each task.

**Instructions**

1. Create a new `Task.vue` file in the `components` directory. Inside the `<script>` block, define a `props` object that includes a `task` property. Display this `task` property inside the `<template>` block.

2. Create a new `TaskList.vue` file in the `components` directory. Inside the `<script setup>` block, import `ref` from Vue and define `tasks` as a reactive variable using `ref`. Initialize `tasks` as an array with a few sample tasks.

3. Import the Task component inside the `TaskList.vue` file. Use the `v-for` directive to loop through the `tasks` array, rendering a Task component for each task. Pass the task data to the Task component as a prop.

4. Finally, in the `App.vue` file, import the TaskList component and use it inside the `<template>` block.

**If Time Allows**

- **Component Composition**: Refactor the `TaskList.vue` component using the `setup()` function for composition. Try using the `reactive()` function instead of `ref()` to define the tasks array.

- **Task Interaction**: Add a button inside the `Task.vue` component that, when clicked, changes the task status to "Completed". Reflect this status visually (e.g., strike-through, color change).

- **Adding Tasks**: Implement a way to add new tasks to the `TaskList.vue` component. This could involve a text input field and a button in the `App.vue` component, where the new task's name is entered.

**Note**: Remember to use `npm run dev` to start your development server and see your changes in the browser. Also, don't forget to use `npm run build` when you're ready to bundle your application for production.

This lab will help you gain familiarity with creating and composing Vue.js components. Enjoy your coding!